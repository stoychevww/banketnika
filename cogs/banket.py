import discord
from discord.ext import commands
import random
import asyncio
from config import Config
from utils.music_utils import MusicUtils

class BanketCog(commands.Cog):
    """Special Bulgarian Banket Features"""
    
    def __init__(self, bot):
        self.bot = bot
        
        # Traditional Bulgarian folk songs
        self.bulgarian_folk_songs = [
            "–ö–∞–ª–∏–Ω–∫–∞",
            "–¢–∏—Ö –±—è–ª –î—É–Ω–∞–≤",
            "–ú–∞–ª–∫–∞ –º–æ–º–∞",
            "–î–∏–ª–º–∞–Ω–æ –î–∏–ª–±–µ—Ä–æ",
            "–ë—ä–ª–≥–∞—Ä—Å–∫–æ —Ö–æ—Ä–æ",
            "–ú–∏–ª–∞ —Ä–æ–¥–∏–Ω–æ",
            "–î—É–Ω–∞–≤—Å–∫–æ —Ö–æ—Ä–æ",
            "–û–π, –ú–∞—Ä–∏–π–∫–µ",
            "–ò–∑–ª–µ–ª –µ –î–µ–ª—é —Ö–∞–π–¥—É—Ç–∏–Ω",
            "–†–∞–¥–∫–∞ –ø–∏—Ç–∞ –º–ª–∞–¥–∞ –Ω–µ–≤–µ—Å—Ç–∞",
            "–°–µ–≤–¥–∞–ª–∏–Ω–∫–∞",
            "–•–æ—Ä–æ –Ω–∞ –ù–µ—Å—Ç–∏–Ω–∞—Ä–∫–∏—Ç–µ",
            "–ë–µ–ª–∏—Ç–µ —Ä–æ–∑–∏",
            "–¢—Ä–∞–∫–∏–π—Å–∫–æ —Ö–æ—Ä–æ",
            "–®–æ–ø—Å–∫–æ —Ö–æ—Ä–æ",
            "–ë—ä–ª–≥–∞—Ä—á–µ",
            "–î—É–Ω–∞–≤—Å–∫–∞ –ª—è—Å—Ç–æ–≤–∏—Ü–∞",
            "–°–µ–¥–Ω–∞–ª–æ –µ –î–∂–æ—Ä–µ –¥–æ—Å",
            "–ü–æ–ª–µ–≥–Ω–∞–ª–∞ –µ –¢–æ–¥–æ—Ä–∞",
            "–ö–æ–≥–∞ —Å–∏ —Ç—Ä—ä–≥–Ω–∞—Ö –æ—Ç –ü–∏—Ä–∏–Ω–∞"
        ]
        
        # Traditional Bulgarian toasts
        self.bulgarian_toasts = [
            "–ù–∞–∑–¥—Ä–∞–≤–µ! –ó–∞ –∑–¥—Ä–∞–≤–µ –∏ —â–∞—Å—Ç–∏–µ!",
            "–ù–∞–∑–¥—Ä–∞–≤–µ! –ó–∞ –¥—ä–ª–≥–∏—è –∂–∏–≤–æ—Ç!",
            "–ù–∞–∑–¥—Ä–∞–≤–µ! –ó–∞ –ø—Ä–∏—è—Ç–µ–ª—Å—Ç–≤–æ—Ç–æ!",
            "–ù–∞–∑–¥—Ä–∞–≤–µ! –ó–∞ –ª—é–±–æ–≤—Ç–∞!",
            "–ù–∞–∑–¥—Ä–∞–≤–µ! –ó–∞ —Å–µ–º–µ–π—Å—Ç–≤–æ—Ç–æ!",
            "–ù–∞–∑–¥—Ä–∞–≤–µ! –ó–∞ –ë—ä–ª–≥–∞—Ä–∏—è!",
            "–ù–∞–∑–¥—Ä–∞–≤–µ! –ó–∞ —Ö—É–±–∞–≤–∏—Ç–µ –º–æ–º–µ–Ω—Ç–∏!",
            "–ù–∞–∑–¥—Ä–∞–≤–µ! –ó–∞ —É—Å–ø–µ—Ö–∏—Ç–µ!",
            "–ù–∞–∑–¥—Ä–∞–≤–µ! –ó–∞ –º–µ—á—Ç–∏—Ç–µ!",
            "–ù–∞–∑–¥—Ä–∞–≤–µ! –ó–∞ –º–ª–∞–¥–æ—Å—Ç—Ç–∞!"
        ]
        
        # Bulgarian banket expressions
        self.banket_expressions = [
            "–î–∞ —Å–µ –≤–µ—Å–µ–ª–∏–º –∫–∞—Ç–æ —Ö–æ—Ä–∞—Ç–∞!",
            "–ë–∞–Ω–∫–µ—Ç –∫–∞—Ç–æ —Ö–æ—Ä–∞—Ç–∞!",
            "–í–µ—Å–µ–ª–æ –∏ –∑–¥—Ä–∞–≤–æ!",
            "–î–∞ –∂–∏–≤–µ–µ–º –¥—ä–ª–≥–æ –∏ —â–∞—Å—Ç–ª–∏–≤–æ!",
            "–ú—É–∑–∏–∫–∞—Ç–∞ –µ –¥—É—à–∞—Ç–∞ –Ω–∞ –±–∞–Ω–∫–µ—Ç–∞!",
            "–ó–∞ –∑–¥—Ä–∞–≤–µ –∏ —Ä–∞–¥–æ—Å—Ç!",
            "–î–∞ –ø–µ–µ–º –∏ –¥–∞ –∏–≥—Ä–∞–µ–º!",
            "–ë–∞–Ω–∫–µ—Ç—ä—Ç –ø—Ä–æ–¥—ä–ª–∂–∞–≤–∞!",
            "–•—É–±–∞–≤–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–∞ –≤—Å–∏—á–∫–∏!",
            "–î–∞ —Å–µ —Ä–∞–¥–≤–∞–º–µ –Ω–∞ –∂–∏–≤–æ—Ç–∞!"
        ]
        
        # Famous Bulgarian musicians/bands
        self.bulgarian_artists = [
            "–í–∞–ª—è –ë–∞–ª–∫–∞–Ω—Å–∫–∞",
            "–ì—É–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞",
            "–°—Ç–µ—Ñ–∞–Ω –î–∏–º–∏—Ç—Ä–æ–≤",
            "–ë–∏—Å–µ—Ä –ö–∏—Ä–æ–≤",
            "–§–∏–ª–∏–ø –ö—É—Ç–µ–≤",
            "–ú–∏—Å—Ç–µ—Ä–∏—è",
            "–°–ª–∞–≤–∏ –¢—Ä–∏—Ñ–æ–Ω–æ–≤",
            "–õ–∏–ª–∏ –ò–≤–∞–Ω–æ–≤–∞",
            "–ö–∞–º–µ–ª–∏—è",
            "–ê–∑–∏—Å",
            "–ü—Ä–µ—Å–ª–∞–≤–∞",
            "–ê–Ω–¥—Ä–µ–∞",
            "–¶–≤–µ—Ç–µ–ª–∏–Ω–∞ –Ø–Ω–µ–≤–∞",
            "–ï–º–∏–ª–∏—è",
            "–ì–ª–æ—Ä–∏—è",
            "–°–æ—Ñ–∏ –ú–∞—Ä–∏–Ω–æ–≤–∞"
        ]
    
    @commands.command(name='folksong', aliases=['–Ω–∞—Ä–æ–¥–Ω–∞'])
    async def folksong(self, ctx):
        """Play a random Bulgarian folk song"""
        song = random.choice(self.bulgarian_folk_songs)
        
        embed = MusicUtils.create_music_embed(
            "üéµ –ë—ä–ª–≥–∞—Ä—Å–∫–∞ –Ω–∞—Ä–æ–¥–Ω–∞ –ø–µ—Å–µ–Ω",
            f"–ü—É—Å–∫–∞–º: **{song}**\n\n{random.choice(self.banket_expressions)}",
            Config.COLOR_SECONDARY
        )
        
        await ctx.send(embed=embed)
        
        # Try to play the song
        music_cog = self.bot.get_cog('Music')
        if music_cog:
            await music_cog.play(ctx, query=f"{song} –±—ä–ª–≥–∞—Ä—Å–∫–∞ –Ω–∞—Ä–æ–¥–Ω–∞ –ø–µ—Å–µ–Ω")
    
    @commands.command(name='toast', aliases=['—Ç–æ—Å—Ç'])
    async def toast(self, ctx, *, message: str = None):
        """Make a Bulgarian toast"""
        if message:
            toast_message = f"ü•Ç {message}\n\n{random.choice(self.bulgarian_toasts)}"
        else:
            toast_message = random.choice(self.bulgarian_toasts)
        
        embed = MusicUtils.create_music_embed(
            "üçª –ë—ä–ª–≥–∞—Ä—Å–∫–∞ –∑–¥—Ä–∞–≤–∏—Ü–∞",
            toast_message,
            Config.COLOR_SECONDARY
        )
        
        await ctx.send(embed=embed)
        
        # Add reactions
        await ctx.message.add_reaction("üçª")
        await ctx.message.add_reaction("ü•Ç")
        await ctx.message.add_reaction("üéâ")
    
    @commands.command(name='horo', aliases=['—Ö–æ—Ä–æ'])
    async def horo(self, ctx):
        """Start a horo (Bulgarian circle dance) session"""
        horo_songs = [
            "–î—É–Ω–∞–≤—Å–∫–æ —Ö–æ—Ä–æ",
            "–¢—Ä–∞–∫–∏–π—Å–∫–æ —Ö–æ—Ä–æ", 
            "–®–æ–ø—Å–∫–æ —Ö–æ—Ä–æ",
            "–ë—ä–ª–≥–∞—Ä—Å–∫–æ —Ö–æ—Ä–æ",
            "–•–æ—Ä–æ –Ω–∞ –ù–µ—Å—Ç–∏–Ω–∞—Ä–∫–∏—Ç–µ",
            "–ü–∞–π–¥—É—à–∫–æ —Ö–æ—Ä–æ",
            "–ï–ª–µ–Ω–æ –º–æ–º–µ",
            "–†—ä—á–µ–Ω–∏—Ü–∞"
        ]
        
        song = random.choice(horo_songs)
        
        embed = MusicUtils.create_music_embed(
            "üíÉ –í—Ä–µ–º–µ –∑–∞ —Ö–æ—Ä–æ!",
            f"–ü—É—Å–∫–∞–º: **{song}**\n\n"
            f"üï∫ –•–≤–∞–Ω–µ—Ç–µ —Å–µ –∑–∞ —Ä—ä—Ü–µ –∏ –∑–∞–ø–æ—á–≤–∞–º–µ —Ö–æ—Ä–æ!\n"
            f"üíÉ –î—è—Å–Ω–∞ –Ω–æ–≥–∞ –Ω–∞–ø—Ä–µ–¥, –ª—è–≤–∞ –Ω–æ–≥–∞ –≤—Å—Ç—Ä–∞–Ω–∏!\n"
            f"üé∂ {random.choice(self.banket_expressions)}",
            Config.COLOR_SECONDARY
        )
        
        await ctx.send(embed=embed)
        
        # Add dance reactions
        await ctx.message.add_reaction("üíÉ")
        await ctx.message.add_reaction("üï∫")
        await ctx.message.add_reaction("üé∂")
        
        # Try to play the horo
        music_cog = self.bot.get_cog('Music')
        if music_cog:
            await music_cog.play(ctx, query=f"{song} –±—ä–ª–≥–∞—Ä—Å–∫–æ —Ö–æ—Ä–æ")
    
    @commands.command(name='artist', aliases=['–∏–∑–ø—ä–ª–Ω–∏—Ç–µ–ª'])
    async def artist(self, ctx, *, artist_name: str = None):
        """Play songs from a Bulgarian artist"""
        if not artist_name:
            artist_name = random.choice(self.bulgarian_artists)
        
        embed = MusicUtils.create_music_embed(
            "üé§ –ë—ä–ª–≥–∞—Ä—Å–∫–∏ –∏–∑–ø—ä–ª–Ω–∏—Ç–µ–ª",
            f"–¢—ä—Ä—Å—è –ø–µ—Å–Ω–∏ –æ—Ç: **{artist_name}**\n\n"
            f"üáßüá¨ –ü–æ–¥–∫—Ä–µ–ø—è–º–µ –±—ä–ª–≥–∞—Ä—Å–∫–∞—Ç–∞ –º—É–∑–∏–∫–∞!\n"
            f"{random.choice(self.banket_expressions)}",
            Config.COLOR_SECONDARY
        )
        
        await ctx.send(embed=embed)
        
        # Try to play artist's songs
        music_cog = self.bot.get_cog('Music')
        if music_cog:
            await music_cog.play(ctx, query=f"{artist_name} –±—ä–ª–≥–∞—Ä—Å–∫–∏ –ø–µ—Å–Ω–∏")
    
    @commands.command(name='banketmix', aliases=['–±–∞–Ω–∫–µ—Ç–º–∏–∫—Å'])
    async def banket_mix(self, ctx):
        """Create a banket mix with multiple Bulgarian songs"""
        if not await self._ensure_voice_connection(ctx):
            return
        
        # Select 5 random songs for the mix
        selected_songs = random.sample(self.bulgarian_folk_songs, min(5, len(self.bulgarian_folk_songs)))
        
        embed = MusicUtils.create_music_embed(
            "üéâ –ë–∞–Ω–∫–µ—Ç –º–∏–∫—Å!",
            f"–î–æ–±–∞–≤—è–º {len(selected_songs)} –±—ä–ª–≥–∞—Ä—Å–∫–∏ –ø–µ—Å–Ω–∏ –≤ –æ–ø–∞—à–∫–∞—Ç–∞:\n\n" +
            "\n".join([f"üéµ {song}" for song in selected_songs]) +
            f"\n\n{random.choice(self.banket_expressions)}",
            Config.COLOR_SECONDARY
        )
        
        await ctx.send(embed=embed)
        
        # Add all songs to queue
        music_cog = self.bot.get_cog('Music')
        if music_cog:
            for song in selected_songs:
                try:
                    await music_cog.play(ctx, query=f"{song} –±—ä–ª–≥–∞—Ä—Å–∫–∞ –Ω–∞—Ä–æ–¥–Ω–∞ –ø–µ—Å–µ–Ω")
                    await asyncio.sleep(1)  # Small delay between requests
                except Exception as e:
                    print(f"Error adding song {song}: {e}")
    
    @commands.command(name='tradition', aliases=['—Ç—Ä–∞–¥–∏—Ü–∏—è'])
    async def tradition(self, ctx):
        """Share Bulgarian banket traditions"""
        traditions = [
            {
                "title": "üçû –ß—É–ø–µ–Ω–µ –Ω–∞ —Ö–ª—è–±–∞",
                "description": "–î–æ–º–∞–∫–∏–Ω—ä—Ç —á—É–ø–∏ —Ö–ª—è–±–∞ –∏ –≥–æ –¥–∞–≤–∞ –Ω–∞ –≥–æ—Å—Ç–∏—Ç–µ –∫–∞—Ç–æ —Å–∏–º–≤–æ–ª –Ω–∞ –≥–æ—Å—Ç–æ–ø—Ä–∏–µ–º—Å—Ç–≤–æ."
            },
            {
                "title": "üç∑ –ü—ä—Ä–≤–∞—Ç–∞ —á–∞—à–∞",
                "description": "–ü—ä—Ä–≤–∞—Ç–∞ —á–∞—à–∞ –≤–∏–Ω—Ü–µ —Å–µ –ø–∏–µ –∑–∞ –∑–¥—Ä–∞–≤–µ—Ç–æ –Ω–∞ –¥–æ–º–∞–∫–∏–Ω–∏—Ç–µ."
            },
            {
                "title": "üéµ –ü–µ—Å–Ω–∏—Ç–µ –Ω–∞ –±–∞–Ω–∫–µ—Ç–∞",
                "description": "–ù–∞—Ä–æ–¥–Ω–∏—Ç–µ –ø–µ—Å–Ω–∏ —Å–µ –ø–µ—è—Ç –≤—Å–∏—á–∫–∏ –∑–∞–µ–¥–Ω–æ, —Å—ä–∑–¥–∞–≤–∞–π–∫–∏ –µ–¥–∏–Ω—Å—Ç–≤–æ."
            },
            {
                "title": "üíÉ –•–æ—Ä–æ—Ç–æ",
                "description": "–ë—ä–ª–≥–∞—Ä—Å–∫–æ—Ç–æ —Ö–æ—Ä–æ —Å–µ –∏–≥—Ä–∞–µ –≤ –∫—Ä—ä–≥, —Å–∏–º–≤–æ–ª–∏–∑–∏—Ä–∞–π–∫–∏ –µ–¥–∏–Ω—Å—Ç–≤–æ—Ç–æ."
            },
            {
                "title": "ü•Ç –ó–¥—Ä–∞–≤–∏—Ü–∏—Ç–µ",
                "description": "–ó–¥—Ä–∞–≤–∏—Ü–∏—Ç–µ —Å–µ –∫–∞–∑–≤–∞—Ç —Å —É–≤–∞–∂–µ–Ω–∏–µ –∏ –∏—Å–∫—Ä–µ–Ω–æ—Å—Ç –∑–∞ –≤—Å–∏—á–∫–∏ –ø—Ä–∏—Å—ä—Å—Ç–≤–∞—â–∏."
            },
            {
                "title": "üé∂ –ú—É–∑–∏–∫–∞—Ç–∞",
                "description": "–ú—É–∑–∏–∫–∞—Ç–∞ –µ —Å—ä—Ä—Ü–µ—Ç–æ –Ω–∞ –±–∞–Ω–∫–µ—Ç–∞ - –±–µ–∑ –Ω–µ—è –Ω—è–º–∞ –∏—Å—Ç–∏–Ω—Å–∫–∏ –ø—Ä–∞–∑–Ω–∏–∫."
            }
        ]
        
        tradition = random.choice(traditions)
        
        embed = MusicUtils.create_music_embed(
            "üáßüá¨ –ë—ä–ª–≥–∞—Ä—Å–∫–∞ —Ç—Ä–∞–¥–∏—Ü–∏—è",
            f"**{tradition['title']}**\n\n{tradition['description']}\n\n"
            f"*{random.choice(self.banket_expressions)}*",
            Config.COLOR_SECONDARY
        )
        
        await ctx.send(embed=embed)
    
    @commands.command(name='cheers', aliases=['—á—É–∫–∞–Ω–µ'])
    async def cheers(self, ctx):
        """Interactive cheers command"""
        embed = MusicUtils.create_music_embed(
            "ü•Ç –í—Ä–µ–º–µ –∑–∞ –∑–¥—Ä–∞–≤–∏—Ü–∞!",
            "–ö–æ–π –∏—Å–∫–∞ –¥–∞ —á—É–∫–Ω–µ —Å –º–µ–Ω?\n\n"
            "–†–µ–∞–≥–∏—Ä–∞–π—Ç–µ —Å üçª –∑–∞ –¥–∞ —Å–µ –ø—Ä–∏—Å—ä–µ–¥–∏–Ω–∏—Ç–µ!",
            Config.COLOR_SECONDARY
        )
        
        message = await ctx.send(embed=embed)
        await message.add_reaction("üçª")
        
        # Wait for reactions
        def check(reaction, user):
            return reaction.message.id == message.id and str(reaction.emoji) == "üçª" and not user.bot
        
        try:
            reaction, user = await self.bot.wait_for('reaction_add', timeout=30.0, check=check)
            
            # Update embed with cheers
            new_embed = MusicUtils.create_music_embed(
                "üçª –ù–∞–∑–¥—Ä–∞–≤–µ!",
                f"{user.mention} —á—É–∫–Ω–∞ —Å –º–µ–Ω!\n\n"
                f"{random.choice(self.bulgarian_toasts)}\n\n"
                f"*{random.choice(self.banket_expressions)}*",
                Config.COLOR_SUCCESS
            )
            
            await message.edit(embed=new_embed)
            
        except asyncio.TimeoutError:
            timeout_embed = MusicUtils.create_music_embed(
                "üòî –ù—è–º–∞ —á—É–∫–∞–Ω–µ",
                "–ù–∏–∫–æ–π –Ω–µ –∏—Å–∫–∞ –¥–∞ —á—É–∫–Ω–µ... –ù–æ –ø–∞–∫ –Ω–∞–∑–¥—Ä–∞–≤–µ! üçª",
                Config.COLOR_WARNING
            )
            await message.edit(embed=timeout_embed)
    
    async def _ensure_voice_connection(self, ctx) -> bool:
        """Ensure bot is connected to voice channel"""
        if not ctx.author.voice:
            embed = MusicUtils.create_music_embed(
                "‚ùå –ì—Ä–µ—à–∫–∞",
                "–¢—Ä—è–±–≤–∞ –¥–∞ —Å—Ç–µ –≤ –≥–ª–∞—Å–æ–≤ –∫–∞–Ω–∞–ª –∑–∞ –¥–∞ –∏–∑–ø–æ–ª–∑–≤–∞—Ç–µ —Ç–∞–∑–∏ –∫–æ–º–∞–Ω–¥–∞!",
                Config.COLOR_ERROR
            )
            await ctx.send(embed=embed)
            return False
        return True
    
    @commands.Cog.listener()
    async def on_message(self, message):
        """Listen for banket-related messages"""
        if message.author.bot:
            return
        
        # Respond to banket-related keywords
        banket_keywords = ['–±–∞–Ω–∫–µ—Ç', 'banket', '–Ω–∞–∑–¥—Ä–∞–≤–µ', 'nazdrave', '—Ö–æ—Ä–æ', 'horo']
        
        content = message.content.lower()
        for keyword in banket_keywords:
            if keyword in content and not content.startswith(Config.BOT_PREFIX):
                # Random chance to respond (20%)
                if random.random() < 0.2:
                    response = random.choice(self.banket_expressions)
                    await message.add_reaction("üçª")
                    await message.channel.send(f"üéâ {response}")
                break

async def setup(bot):
    await bot.add_cog(BanketCog(bot)) 